{"ast":null,"code":"import _objectSpread from \"D:\\\\MY_WORK\\\\react-routing-test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"D:\\\\MY_WORK\\\\react-routing-test\\\\src\\\\components\\\\elements\\\\Form.js\";\nimport React from 'react';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.submitHandeler = $event => {\n      $event.preventDefault();\n      const formData = {};\n      const errorMessages = {};\n      var formValidStatus = true;\n      const formElement = Object.keys(this.props.config.elements).map(elementName => {\n        let name = elementName;\n        let value = this.props.config.elements[elementName].value;\n        formData[elementName] = value;\n        let validation = this.props.config.elements[elementName].validation.rules;\n\n        if (validation) {\n          errorMessages[name] = {};\n\n          if (validation.indexOf('required') > -1) {\n            if (value == '') {\n              errorMessages[name]['required'] = 'field is required';\n              formValidStatus = false;\n            }\n          }\n\n          if (value !== '' && validation.indexOf('email') > -1) {\n            if (!/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\n              errorMessages[name]['email'] = 'Email is not valid';\n              formValidStatus = false;\n            }\n          }\n\n          if (value !== '' && validation.find(i => i.startsWith('min'))) {\n            let minValue = validation.find(i => i.startsWith('min')).split(':');\n            minValue = parseInt(minValue[1]);\n\n            if (value.length < minValue) {\n              errorMessages[name]['min'] = 'minimum ' + minValue + ' character is required';\n              formValidStatus = false;\n            }\n          }\n\n          if (value !== '' && validation.find(i => i.startsWith('max'))) {\n            let maxValue = validation.find(i => i.startsWith('max')).split(':');\n            maxValue = parseInt(maxValue[1]);\n\n            if (value.length > maxValue) {\n              errorMessages[name]['max'] = 'max ' + maxValue + ' character is required';\n              formValidStatus = false;\n            }\n          }\n        }\n\n        return {\n          name: name,\n          value: value\n        };\n      });\n      setTimeout(() => {\n        this.setState(prevState => _objectSpread({}, prevState, {\n          validation: _objectSpread({}, prevState.validation, {\n            messages: errorMessages,\n            valid: formValidStatus\n          }),\n          formValue: formData\n        }));\n\n        if (this.state.validation.valid === true) {\n          this.props.onSubmit(this.state); // this.props.config.submitHandeler(this.state.formValue);\n        } else {// alert('error');\n          }\n      }, 50); // this.props.config.submitHandeler();\n    };\n\n    this.state = {\n      validation: {\n        rules: {},\n        messages: {},\n        valid: false\n      },\n      formValue: {}\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return React.createElement(\"form\", {\n      name: this.props.config.name,\n      onSubmit: this.submitHandeler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, Object.keys(this.props.config.elements).map(i => {\n      let formElement = this.props.config.elements[i];\n      return React.createElement(\"div\", {\n        className: \"form-group\",\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, i), (() => {\n        switch (formElement.type) {\n          case \"text\":\n            return React.createElement(\"input\", {\n              key: i,\n              type: \"text\",\n              className: \"form-control\",\n              name: i,\n              defaultValue: formElement.value,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 96\n              },\n              __self: this\n            });\n\n          case \"email\":\n            return React.createElement(\"input\", {\n              key: i,\n              type: \"email\",\n              className: \"form-control\",\n              name: i,\n              defaultValue: formElement.value,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 98\n              },\n              __self: this\n            });\n\n          case \"password\":\n            return React.createElement(\"input\", {\n              key: i,\n              type: \"password\",\n              className: \"form-control\",\n              name: i,\n              defaultValue: formElement.value,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 100\n              },\n              __self: this\n            });\n        }\n      })(), this.state.validation.messages[formElement.name] && this.state.validation.messages[formElement.name].required && React.createElement(\"p\", {\n        className: \"form-err\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, this.state.validation.messages[formElement.name].required), this.state.validation.messages[formElement.name] && this.state.validation.messages[formElement.name].email && React.createElement(\"p\", {\n        className: \"form-err\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, this.state.validation.messages[formElement.name].email));\n    }), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, this.props.config.buttons.map(i => {\n      return React.createElement(\"input\", {\n        type: i.type,\n        value: i.value,\n        className: i.cssClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      });\n    })));\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["D:/MY_WORK/react-routing-test/src/components/elements/Form.js"],"names":["React","Form","Component","constructor","props","submitHandeler","$event","preventDefault","formData","errorMessages","formValidStatus","formElement","Object","keys","config","elements","map","elementName","name","value","validation","rules","indexOf","test","find","i","startsWith","minValue","split","parseInt","length","maxValue","setTimeout","setState","prevState","messages","valid","formValue","state","onSubmit","componentDidMount","render","type","required","email","buttons","cssClass"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nclass Form extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            validation: {\r\n                rules: {},\r\n                messages: {},\r\n                valid: false,\r\n            },\r\n            formValue: {}\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        \r\n    }\r\n    submitHandeler = ($event) => {\r\n\r\n        $event.preventDefault();\r\n        const formData = {};\r\n        const errorMessages = {};\r\n        var formValidStatus = true;\r\n        const formElement = Object.keys(this.props.config.elements).map((elementName) => {\r\n            let name = elementName;\r\n            let value =  this.props.config.elements[elementName].value;\r\n            formData[elementName] = value;\r\n            let validation = this.props.config.elements[elementName].validation.rules;\r\n            if (validation) {\r\n                errorMessages[name] = {};\r\n                if (validation.indexOf('required') > -1) {\r\n                    if (value == '') {\r\n                        errorMessages[name]['required'] = 'field is required';\r\n                        formValidStatus = false;\r\n                    }\r\n                }\r\n                if (value !== '' && validation.indexOf('email') > -1) {\r\n                    if (!(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/).test(value)) {\r\n                        errorMessages[name]['email'] = 'Email is not valid';\r\n                        formValidStatus = false;\r\n                    }\r\n                }\r\n                if (value !== '' && validation.find((i) => i.startsWith('min'))) {\r\n                    let minValue = validation.find((i) => i.startsWith('min')).split(':');\r\n                    minValue = parseInt(minValue[1]);\r\n                    if (value.length < minValue) {\r\n                        errorMessages[name]['min'] = 'minimum ' + minValue + ' character is required';\r\n                        formValidStatus = false;\r\n                    }\r\n                }\r\n                if (value !== '' && validation.find((i) => i.startsWith('max'))) {\r\n                    let maxValue = validation.find((i) => i.startsWith('max')).split(':');\r\n                    maxValue = parseInt(maxValue[1]);\r\n                    if (value.length > maxValue) {\r\n                        errorMessages[name]['max'] = 'max ' + maxValue + ' character is required';\r\n                        formValidStatus = false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return {\r\n                name: name,\r\n                value: value\r\n            }\r\n        });\r\n        setTimeout(() => {\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                validation: {\r\n                    ...prevState.validation,\r\n                    messages: errorMessages,\r\n                    valid: formValidStatus,\r\n                },\r\n                formValue: formData\r\n            }));\r\n            if (this.state.validation.valid === true) {\r\n                this.props.onSubmit(this.state);\r\n                // this.props.config.submitHandeler(this.state.formValue);\r\n            } else {\r\n                // alert('error');\r\n            }\r\n        }, 50);\r\n        // this.props.config.submitHandeler();\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <form name={this.props.config.name} onSubmit={this.submitHandeler}>\r\n                {Object.keys(this.props.config.elements).map((i) => {\r\n                    let formElement = this.props.config.elements[i];\r\n                    return <div className=\"form-group\" key={i}>\r\n                        <label>{i}</label>\r\n                        {(() => {\r\n                            switch (formElement.type) {\r\n                                case \"text\":\r\n                                    return <input key={i} type=\"text\" className=\"form-control\" name={i} defaultValue={formElement.value} />\r\n                                case \"email\":\r\n                                    return <input key={i} type=\"email\" className=\"form-control\" name={i} defaultValue={formElement.value} />\r\n                                case \"password\":\r\n                                    return <input key={i} type=\"password\" className=\"form-control\" name={i} defaultValue={formElement.value} />\r\n                            }\r\n                        })()}\r\n                        {(this.state.validation.messages[formElement.name] && this.state.validation.messages[formElement.name].required) &&\r\n                            <p className=\"form-err\">\r\n                                {this.state.validation.messages[formElement.name].required}\r\n                            </p>}\r\n                        {(this.state.validation.messages[formElement.name] && this.state.validation.messages[formElement.name].email) &&\r\n                            <p className=\"form-err\">\r\n                                {this.state.validation.messages[formElement.name].email}\r\n                            </p>\r\n                        }\r\n                    </div>\r\n                })}\r\n                <div className=\"form-group\">\r\n                    {this.props.config.buttons.map((i) => {\r\n                        return <input type={i.type} value={i.value} className={i.cssClass} />\r\n                    })}\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}