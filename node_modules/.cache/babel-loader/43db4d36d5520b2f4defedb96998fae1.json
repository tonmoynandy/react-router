{"ast":null,"code":"import _objectSpread from \"D:\\\\MY_WORK\\\\react-routing-test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"D:\\\\MY_WORK\\\\react-routing-test\\\\src\\\\components\\\\Dashboard.js\";\nimport React, { Component } from 'react';\nimport { DbHelper } from '../DbHelper';\nimport { connect } from 'react-redux';\nimport Moment from 'react-moment';\nimport UserMenu from './UserMenu';\nimport Posts from './elements/Posts';\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.submitPost = () => {\n      const form = document.postform;\n      let postContent = form.postcontent.value;\n      postContent = postContent.trim();\n\n      if (postContent) {\n        DbHelper.insert('posts', {\n          user: this.state.user._id,\n          content: postContent,\n          postedAt: new Date().getTime()\n        });\n        this.setState({\n          'success': 'Your status is posted'\n        });\n        form.reset();\n        this.getUserPosts();\n        setTimeout(() => {\n          this.setState({\n            'success': null\n          });\n        }, 3000);\n      } else {\n        this.setState({\n          'errors': 'Please add any content as your status'\n        });\n        setTimeout(() => {\n          this.setState({\n            'errors': null\n          });\n        }, 3000);\n      }\n    };\n\n    this.commentDisplay = postIndex => {\n      let commentdisplayArr = this.state.commentDisplay;\n      let index = commentdisplayArr.indexOf(postIndex);\n\n      if (index == -1) {\n        commentdisplayArr.push(postIndex);\n      } else {\n        commentdisplayArr.splice(index, 1);\n      }\n\n      this.setState({\n        commentDisplay: commentdisplayArr\n      });\n    };\n\n    this.handelCommentResponse = response => {\n      let userPosts = this.props.userPosts;\n      let postIndex = userPosts.findIndex(i => {\n        return i._id == response;\n      });\n      userPosts[postIndex].comments = userPosts[postIndex].comments + 1;\n      this.props.dispatch({\n        type: 'USER_POST',\n        userPosts\n      });\n    };\n\n    this.state = {\n      errors: '',\n      success: '',\n      user: JSON.parse(sessionStorage.getItem(\"_u\")),\n      commentDisplay: []\n    };\n    this.getUserPosts();\n  }\n\n  getUserPosts() {\n    let userFriendList = DbHelper.filter('friend_requests', [['user_id', this.state.user._id], ['status', 'A']]);\n    let friendIds = userFriendList.map(i => i.friend_id);\n    friendIds.push(this.state.user._id);\n    let userPosts = DbHelper.all('posts');\n    userPosts = userPosts.filter(i => friendIds.indexOf(i.user) > -1).map(i => {\n      return _objectSpread({}, i, {\n        user: DbHelper.find('users', [['_id', i.user]]),\n        comments: DbHelper.filter('comments', [['post_id', i._id]]).length\n      });\n    });\n    userPosts = userPosts.sort(function (a, b) {\n      return b.postedAt - a.postedAt;\n    });\n\n    if (userPosts) {\n      this.props.dispatch({\n        type: 'USER_POST',\n        userPosts\n      }); // USER_POST\n    }\n  }\n\n  render() {\n    let userPostContent = [];\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Dashboard\")), React.createElement(\"div\", {\n      className: \"col-7 text-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(UserMenu, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, this.state.success && React.createElement(\"div\", {\n      class: \"alert alert-success text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, this.state.success), this.state.errors && React.createElement(\"div\", {\n      class: \"alert alert-danger text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, this.state.errors), React.createElement(\"div\", {\n      className: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      name: \"postform\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      placeholder: \"Your status...\",\n      name: \"postcontent\",\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"col text-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"button\",\n      onClick: this.submitPost,\n      value: \"Post\",\n      className: \"btn btn-primary btn-sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })))))), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, this.props.userPosts && React.createElement(Posts, {\n      posts: this.props.userPosts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    userPosts: state.userpostreducer\n  };\n};\n\nexport default connect(mapStateToProps)(Dashboard);","map":{"version":3,"sources":["D:/MY_WORK/react-routing-test/src/components/Dashboard.js"],"names":["React","Component","DbHelper","connect","Moment","UserMenu","Posts","Dashboard","constructor","props","submitPost","form","document","postform","postContent","postcontent","value","trim","insert","user","state","_id","content","postedAt","Date","getTime","setState","reset","getUserPosts","setTimeout","commentDisplay","postIndex","commentdisplayArr","index","indexOf","push","splice","handelCommentResponse","response","userPosts","findIndex","i","comments","dispatch","type","errors","success","JSON","parse","sessionStorage","getItem","userFriendList","filter","friendIds","map","friend_id","all","find","length","sort","a","b","render","userPostContent","mapStateToProps","userpostreducer"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {DbHelper} from '../DbHelper';\r\nimport {connect} from 'react-redux';\r\nimport Moment from 'react-moment';\r\nimport UserMenu from './UserMenu';\r\nimport Posts from './elements/Posts';\r\nclass Dashboard extends  Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      errors:'',\r\n      success:'',\r\n      user:JSON.parse(sessionStorage.getItem(\"_u\")),\r\n      commentDisplay:[]\r\n    }\r\n    this.getUserPosts();\r\n  }\r\n  getUserPosts() {\r\n    let userFriendList = DbHelper.filter('friend_requests',[\r\n      ['user_id',this.state.user._id],\r\n      ['status','A']    \r\n    ]);\r\n    let friendIds = userFriendList.map((i)=> i.friend_id);\r\n    friendIds.push(this.state.user._id);\r\n        let userPosts = DbHelper.all('posts');\r\n        userPosts = userPosts.filter((i)=> friendIds.indexOf(i.user)>-1).map((i)=>{\r\n          return {\r\n            ...i,\r\n            user:DbHelper.find('users',[['_id',i.user]]),\r\n            comments:DbHelper.filter('comments',[['post_id',i._id]]).length\r\n          }\r\n        });\r\n    userPosts = userPosts.sort(function(a,b){ return b.postedAt - a.postedAt });\r\n    if (userPosts) {\r\n      this.props.dispatch({\r\n          type: 'USER_POST',\r\n          userPosts\r\n        })\r\n      // USER_POST\r\n    }\r\n  }\r\n  submitPost = ()=>{\r\n    const form = document.postform;\r\n    let postContent = form.postcontent.value;\r\n    postContent = postContent.trim();\r\n    if (postContent) {\r\n      DbHelper.insert('posts',{\r\n          user: this.state.user._id,\r\n          content:postContent,\r\n          postedAt: new Date().getTime()\r\n      });\r\n  \r\n      this.setState({'success':'Your status is posted'});\r\n      form.reset();\r\n      this.getUserPosts();\r\n      setTimeout(()=>{\r\n        this.setState({'success':null});\r\n      },3000)\r\n    } else {\r\n      this.setState({'errors':'Please add any content as your status'});\r\n      setTimeout(()=>{\r\n        this.setState({'errors':null});\r\n      },3000)\r\n    }\r\n   \r\n  }\r\n  commentDisplay = (postIndex)=> {\r\n    let commentdisplayArr = this.state.commentDisplay;\r\n    let index = commentdisplayArr.indexOf(postIndex);\r\n    if (index == -1) {\r\n      commentdisplayArr.push(postIndex);\r\n    } else {\r\n      commentdisplayArr.splice(index,1);\r\n    }\r\n   \r\n    this.setState({commentDisplay:commentdisplayArr})\r\n  }\r\n  handelCommentResponse = (response)=>{\r\n    let userPosts= this.props.userPosts;\r\n    let postIndex = userPosts.findIndex((i)=>{\r\n      return i._id == response;\r\n    })\r\n    userPosts[postIndex].comments = userPosts[postIndex].comments+1;\r\n   this.props.dispatch({\r\n          type: 'USER_POST',\r\n          userPosts\r\n        })\r\n  }\r\n  render() {\r\n    let userPostContent = [];\r\n    \r\n    \r\n    return (\r\n      <React.Fragment>\r\n      <div className=\"row\">\r\n      <div className=\"col-5\">\r\n      <h4>Dashboard</h4>\r\n      </div>\r\n      <div className=\"col-7 text-right\">\r\n      <UserMenu/>\r\n      </div>\r\n      </div>\r\n      <div className=\"row\">\r\n      <div className=\"col-12\">\r\n          {this.state.success &&\r\n          <div class=\"alert alert-success text-center\">\r\n          {this.state.success}\r\n          </div>\r\n          }\r\n          {this.state.errors &&\r\n          <div class=\"alert alert-danger text-center\">\r\n          {this.state.errors}\r\n          </div>\r\n          }\r\n          <div className=\"card\"><div className=\"card-body\">\r\n          <form name=\"postform\">\r\n          <div className=\"form-group\">\r\n          <textarea placeholder=\"Your status...\" name=\"postcontent\" className=\"form-control\"></textarea></div>\r\n          </form>\r\n          <div className=\"col text-right\">\r\n          <input type=\"button\" onClick={this.submitPost} value=\"Post\" className=\"btn btn-primary btn-sm\"/>\r\n          </div>\r\n          </div></div>\r\n      </div>\r\n      </div>\r\n      <div className=\"row\">\r\n      {this.props.userPosts &&\r\n      <Posts posts={this.props.userPosts}/>\r\n      }\r\n      </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) =>{\r\n  return {\r\n    userPosts: state.userpostreducer\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Dashboard);"]},"metadata":{},"sourceType":"module"}