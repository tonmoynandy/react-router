{"ast":null,"code":"var _jsxFileName = \"D:\\\\MY_WORK\\\\react-routing-test\\\\src\\\\components\\\\Register.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { DbHelper } from '../DbHelper';\nimport Form from './elements/Form';\n\nclass Register extends React.Component {\n  constructor() {\n    super();\n\n    this.submitHandeler = e => {\n      if (e.valid) {\n        console.log(e.formValue);\n      } // const formData = {};\n      //   const errorMessages = {};\n      //   var formValidStatus = true;\n      //   const formElement =  Array.from(document.registerform.elements).map(({name,value})=>{\n      //     formData[name] = value;\n      //     let validation = this.state.validation.rules[name];\n      //     if (validation) {\n      //       errorMessages[name] = {};\n      //       if (validation.indexOf('required') > -1) {\n      //         if (value == '') {\n      //          errorMessages[name]['required']='field is required';\n      //          formValidStatus = false;\n      //         }\n      //       }\n      //       if (value !== '' && validation.indexOf('email') > -1) {\n      //        if (!(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/).test(value)) {\n      //         errorMessages[name]['email']='Email is not valid';\n      //         formValidStatus = false;\n      //        }\n      //       }\n      //       if (value !== '' && validation.find((i)=> i.startsWith('min'))) {\n      //          let minValue = validation.find((i)=> i.startsWith('min')).split(':');\n      //          minValue = parseInt(minValue[1]);\n      //          if (value.length < minValue) {\n      //            errorMessages[name]['min']='minimum '+minValue+' character is required';\n      //            formValidStatus = false;\n      //          }\n      //       }\n      //       if (value !== '' && validation.find((i)=> i.startsWith('max'))) {\n      //          let maxValue = validation.find((i)=> i.startsWith('max')).split(':');\n      //          maxValue = parseInt(maxValue[1]);\n      //          if (value.length > maxValue) {\n      //            errorMessages[name]['max']='max '+maxValue+' character is required';\n      //            formValidStatus = false;\n      //          }\n      //       }\n      //     }\n      //     return {\n      //       name:name,\n      //       value:value\n      //     }\n      //   });\n      //   setTimeout(()=>{\n      //     this.setState(prevState=>({\n      //           ...prevState,\n      //           validation:{\n      //             ...prevState.validation,\n      //             messages:errorMessages,\n      //             valid:formValidStatus,\n      //           },\n      //           formValue:formData\n      //         }));\n      //   if ( this.state.validation.valid === true) {\n      //      DbHelper.insert('users',this.state.formValue);\n      //      document.registerform.reset();\n      //      this.setState({'successMessage':'Welcome '+ this.state.formValue.name})\n      //   } else {\n      //     // alert('error');\n      //   }\n      //   },50);\n\n    };\n\n    this.state = {\n      formConfig: {\n        name: 'regForm',\n        elements: {\n          'name': {\n            type: 'text',\n            value: '',\n            validation: ['required']\n          },\n          'email': {\n            type: 'email',\n            value: '',\n            validation: ['required', 'email']\n          },\n          'password': {\n            type: 'password',\n            value: '',\n            validation: ['required']\n          }\n        },\n        buttons: [{\n          type: 'submit',\n          value: 'Sign up',\n          cssClass: 'btn btn-success'\n        }],\n        submitHandeler: null\n      },\n      successMessage: ''\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"col-8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Sign up\"), this.state.successMessage && React.createElement(\"div\", {\n      className: \"alert alert-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, this.state.successMessage), React.createElement(Form, {\n      config: this.state.formConfig,\n      onSubmit: this.submitHandeler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col text-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: '/',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Existing User?\")))))), React.createElement(\"div\", {\n      className: \"col-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Register;","map":{"version":3,"sources":["D:/MY_WORK/react-routing-test/src/components/Register.js"],"names":["React","Link","DbHelper","Form","Register","Component","constructor","submitHandeler","e","valid","console","log","formValue","state","formConfig","name","elements","type","value","validation","buttons","cssClass","successMessage","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { DbHelper } from '../DbHelper';\r\nimport Form from './elements/Form';\r\nclass Register extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      formConfig: {\r\n        name: 'regForm',\r\n        elements: {\r\n          'name': {\r\n            type: 'text',\r\n            value: '',\r\n            validation: ['required']\r\n          },\r\n          'email': {\r\n            type: 'email',\r\n            value: '',\r\n            validation: ['required', 'email']\r\n          },\r\n          'password': {\r\n            type: 'password',\r\n            value: '',\r\n            validation: ['required']\r\n          }\r\n        },\r\n        buttons: [\r\n          {\r\n            type: 'submit',\r\n            value: 'Sign up',\r\n            cssClass: 'btn btn-success'\r\n          }\r\n        ],\r\n        submitHandeler: null\r\n      },\r\n      \r\n      successMessage: ''\r\n    }\r\n  }\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  submitHandeler = (e) => {\r\n    if (e.valid) {\r\n      console.log(e.formValue)\r\n    }\r\n    // const formData = {};\r\n    //   const errorMessages = {};\r\n    //   var formValidStatus = true;\r\n    //   const formElement =  Array.from(document.registerform.elements).map(({name,value})=>{\r\n    //     formData[name] = value;\r\n    //     let validation = this.state.validation.rules[name];\r\n    //     if (validation) {\r\n    //       errorMessages[name] = {};\r\n    //       if (validation.indexOf('required') > -1) {\r\n    //         if (value == '') {\r\n    //          errorMessages[name]['required']='field is required';\r\n    //          formValidStatus = false;\r\n    //         }\r\n    //       }\r\n    //       if (value !== '' && validation.indexOf('email') > -1) {\r\n    //        if (!(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/).test(value)) {\r\n    //         errorMessages[name]['email']='Email is not valid';\r\n    //         formValidStatus = false;\r\n    //        }\r\n    //       }\r\n    //       if (value !== '' && validation.find((i)=> i.startsWith('min'))) {\r\n    //          let minValue = validation.find((i)=> i.startsWith('min')).split(':');\r\n    //          minValue = parseInt(minValue[1]);\r\n    //          if (value.length < minValue) {\r\n    //            errorMessages[name]['min']='minimum '+minValue+' character is required';\r\n    //            formValidStatus = false;\r\n    //          }\r\n    //       }\r\n    //       if (value !== '' && validation.find((i)=> i.startsWith('max'))) {\r\n    //          let maxValue = validation.find((i)=> i.startsWith('max')).split(':');\r\n    //          maxValue = parseInt(maxValue[1]);\r\n    //          if (value.length > maxValue) {\r\n    //            errorMessages[name]['max']='max '+maxValue+' character is required';\r\n    //            formValidStatus = false;\r\n    //          }\r\n    //       }\r\n    //     }\r\n\r\n    //     return {\r\n    //       name:name,\r\n    //       value:value\r\n    //     }\r\n    //   });\r\n    //   setTimeout(()=>{\r\n    //     this.setState(prevState=>({\r\n    //           ...prevState,\r\n    //           validation:{\r\n    //             ...prevState.validation,\r\n    //             messages:errorMessages,\r\n    //             valid:formValidStatus,\r\n    //           },\r\n    //           formValue:formData\r\n    //         }));\r\n    //   if ( this.state.validation.valid === true) {\r\n    //      DbHelper.insert('users',this.state.formValue);\r\n    //      document.registerform.reset();\r\n    //      this.setState({'successMessage':'Welcome '+ this.state.formValue.name})\r\n    //   } else {\r\n    //     // alert('error');\r\n    //   }\r\n    //   },50);\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-2\"></div>\r\n        <div className=\"col-8\">\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <h5 className=\"text-center\">Sign up</h5>\r\n              {this.state.successMessage &&\r\n                <div className=\"alert alert-success\" >\r\n                  {this.state.successMessage}\r\n                </div>\r\n              }\r\n              <Form config={this.state.formConfig} onSubmit={this.submitHandeler} />\r\n              <div className=\"row\">\r\n                <div className=\"col text-right\">\r\n                  <Link to={'/'} >Existing User?</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-2\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;"]},"metadata":{},"sourceType":"module"}