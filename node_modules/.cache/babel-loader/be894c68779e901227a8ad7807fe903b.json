{"ast":null,"code":"import _objectSpread from \"D:\\\\MY_WORK\\\\react-routing-test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"D:\\\\MY_WORK\\\\react-routing-test\\\\src\\\\components\\\\elements\\\\Form.js\";\nimport React from 'react';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.submitHandeler = $event => {\n      $event.preventDefault();\n      const formData = {};\n      const errorMessages = {};\n      var formValidStatus = true;\n      let formDom = document[this.props.config.name];\n      const formElement = Object.keys(this.props.config.elements).map(elementName => {\n        let name = elementName;\n        let value = formDom[elementName].value;\n        formData[elementName] = value;\n        let validation = this.props.config.elements[elementName].validation;\n\n        if (validation) {\n          errorMessages[name] = {};\n\n          if (validation.indexOf('required') > -1) {\n            if (value == '') {\n              errorMessages[name]['required'] = 'field is required';\n              formValidStatus = false;\n            }\n          }\n\n          if (value !== '' && validation.indexOf('email') > -1) {\n            if (!/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\n              errorMessages[name]['email'] = 'Email is not valid';\n              formValidStatus = false;\n            }\n          }\n\n          if (value !== '' && validation.find(i => i.startsWith('min'))) {\n            let minValue = validation.find(i => i.startsWith('min')).split(':');\n            minValue = parseInt(minValue[1]);\n\n            if (value.length < minValue) {\n              errorMessages[name]['min'] = 'minimum ' + minValue + ' character is required';\n              formValidStatus = false;\n            }\n          }\n\n          if (value !== '' && validation.find(i => i.startsWith('max'))) {\n            let maxValue = validation.find(i => i.startsWith('max')).split(':');\n            maxValue = parseInt(maxValue[1]);\n\n            if (value.length > maxValue) {\n              errorMessages[name]['max'] = 'max ' + maxValue + ' character is required';\n              formValidStatus = false;\n            }\n          }\n\n          if (value !== '' && validation.find(i => i.startsWith('match_to'))) {\n            let matchField = validation.find(i => i.startsWith('match_to')).split(':');\n            matchField = matchField[1];\n\n            if (value !== formDom[matchField].value) {\n              errorMessages[name]['match_to'] = `value is not matching with ${matchField}`;\n              formValidStatus = false;\n            }\n          }\n        }\n\n        return {\n          name: name,\n          value: value\n        };\n      });\n      setTimeout(() => {\n        this.setState(prevState => _objectSpread({}, prevState, {\n          validation: _objectSpread({}, prevState.validation, {\n            messages: errorMessages\n          }),\n          valid: formValidStatus,\n          formValue: formData\n        }));\n        this.props.onSubmit(this.state);\n      }, 50); // this.props.config.submitHandeler();\n    };\n\n    this.state = {\n      validation: {\n        rules: {},\n        messages: {}\n      },\n      valid: false,\n      formValue: {}\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return React.createElement(\"form\", {\n      name: this.props.config.name,\n      onSubmit: this.submitHandeler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, Object.keys(this.props.config.elements).map(formElementName => {\n      let formElement = this.props.config.elements[formElementName];\n      return React.createElement(\"div\", {\n        className: \"form-group\",\n        key: formElementName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, formElementName.replace(\"_\", ' ')), (() => {\n        switch (formElement.type) {\n          case \"text\":\n            return React.createElement(\"input\", {\n              key: formElementName,\n              type: \"text\",\n              className: \"form-control\",\n              name: formElementName,\n              defaultValue: formElement.value,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 101\n              },\n              __self: this\n            });\n\n          case \"email\":\n            return React.createElement(\"input\", {\n              key: formElementName,\n              type: \"email\",\n              className: \"form-control\",\n              name: formElementName,\n              defaultValue: formElement.value,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 103\n              },\n              __self: this\n            });\n\n          case \"password\":\n            return React.createElement(\"input\", {\n              key: formElementName,\n              type: \"password\",\n              className: \"form-control\",\n              name: formElementName,\n              defaultValue: formElement.value,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 105\n              },\n              __self: this\n            });\n        }\n      })(), this.state.validation.messages[formElementName] && this.state.validation.messages[formElementName].required && React.createElement(\"p\", {\n        className: \"form-err\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, this.state.validation.messages[formElementName].required), this.state.validation.messages[formElementName] && this.state.validation.messages[formElementName].email && React.createElement(\"p\", {\n        className: \"form-err\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, this.state.validation.messages[formElementName].email), this.state.validation.messages[formElementName] && this.state.validation.messages[formElementName].match_to && React.createElement(\"p\", {\n        className: \"form-err\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, this.state.validation.messages[formElementName].match_to));\n    }), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, this.props.config.buttons.map(i => {\n      return React.createElement(\"input\", {\n        type: i.type,\n        value: i.value,\n        className: i.cssClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      });\n    })));\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["D:/MY_WORK/react-routing-test/src/components/elements/Form.js"],"names":["React","Form","Component","constructor","props","submitHandeler","$event","preventDefault","formData","errorMessages","formValidStatus","formDom","document","config","name","formElement","Object","keys","elements","map","elementName","value","validation","indexOf","test","find","i","startsWith","minValue","split","parseInt","length","maxValue","matchField","setTimeout","setState","prevState","messages","valid","formValue","onSubmit","state","rules","componentDidMount","render","formElementName","replace","type","required","email","match_to","buttons","cssClass"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nclass Form extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            validation: {\r\n                rules: {},\r\n                messages: {},\r\n            },\r\n            valid:false,\r\n            formValue: {}\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        \r\n    }\r\n    submitHandeler = ($event) => {\r\n\r\n        $event.preventDefault();\r\n        const formData = {};\r\n        const errorMessages = {};\r\n        var formValidStatus = true;\r\n        let formDom = document[this.props.config.name];\r\n        const formElement = Object.keys(this.props.config.elements).map((elementName) => {\r\n            let name = elementName;\r\n            let value =  formDom[elementName].value;\r\n            formData[elementName] = value;\r\n            let validation = this.props.config.elements[elementName].validation;\r\n            if (validation) {\r\n                errorMessages[name] = {};\r\n                if (validation.indexOf('required') > -1) {\r\n                    if (value == '') {\r\n                        errorMessages[name]['required'] = 'field is required';\r\n                        formValidStatus = false;\r\n                    }\r\n                }\r\n                if (value !== '' && validation.indexOf('email') > -1) {\r\n                    if (!(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/).test(value)) {\r\n                        errorMessages[name]['email'] = 'Email is not valid';\r\n                        formValidStatus = false;\r\n                    }\r\n                }\r\n                if (value !== '' && validation.find((i) => i.startsWith('min'))) {\r\n                    let minValue = validation.find((i) => i.startsWith('min')).split(':');\r\n                    minValue = parseInt(minValue[1]);\r\n                    if (value.length < minValue) {\r\n                        errorMessages[name]['min'] = 'minimum ' + minValue + ' character is required';\r\n                        formValidStatus = false;\r\n                    }\r\n                }\r\n                if (value !== '' && validation.find((i) => i.startsWith('max'))) {\r\n                    let maxValue = validation.find((i) => i.startsWith('max')).split(':');\r\n                    maxValue = parseInt(maxValue[1]);\r\n                    if (value.length > maxValue) {\r\n                        errorMessages[name]['max'] = 'max ' + maxValue + ' character is required';\r\n                        formValidStatus = false;\r\n                    }\r\n                }\r\n                if (value !== '' && validation.find((i) => i.startsWith('match_to'))) {\r\n                    let matchField = validation.find((i) => i.startsWith('match_to')).split(':')\r\n                    matchField = matchField[1];\r\n                    if (value !== formDom[matchField].value) {\r\n                        errorMessages[name]['match_to'] = `value is not matching with ${matchField}` ;\r\n                        formValidStatus = false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return {\r\n                name: name,\r\n                value: value\r\n            }\r\n        });\r\n        setTimeout(() => {\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                validation: {\r\n                    ...prevState.validation,\r\n                    messages: errorMessages,\r\n                    \r\n                },\r\n                valid: formValidStatus,\r\n                formValue: formData\r\n            }));\r\n            this.props.onSubmit(this.state);\r\n        }, 50);\r\n        // this.props.config.submitHandeler();\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <form name={this.props.config.name} onSubmit={this.submitHandeler}>\r\n                {Object.keys(this.props.config.elements).map((formElementName) => {\r\n                    let formElement = this.props.config.elements[formElementName];\r\n                    return <div className=\"form-group\" key={formElementName}>\r\n                        <label>{formElementName.replace(\"_\",' ')}</label>\r\n                        {(() => {\r\n                            switch (formElement.type) {\r\n                                case \"text\":\r\n                                    return <input key={formElementName} type=\"text\" className=\"form-control\" name={formElementName} defaultValue={formElement.value} />\r\n                                case \"email\":\r\n                                    return <input key={formElementName} type=\"email\" className=\"form-control\" name={formElementName} defaultValue={formElement.value} />\r\n                                case \"password\":\r\n                                    return <input key={formElementName} type=\"password\" className=\"form-control\" name={formElementName} defaultValue={formElement.value} />\r\n                            }\r\n                        })()}\r\n                        {(this.state.validation.messages[formElementName] && this.state.validation.messages[formElementName].required) &&\r\n                            <p className=\"form-err\">\r\n                                {this.state.validation.messages[formElementName].required}\r\n                            </p>}\r\n                        {(this.state.validation.messages[formElementName] && this.state.validation.messages[formElementName].email) &&\r\n                            <p className=\"form-err\">\r\n                                {this.state.validation.messages[formElementName].email}\r\n                            </p>\r\n                        }\r\n                        {(this.state.validation.messages[formElementName] && this.state.validation.messages[formElementName].match_to) &&\r\n                            <p className=\"form-err\">\r\n                                {this.state.validation.messages[formElementName].match_to}\r\n                            </p>\r\n                        }\r\n                        \r\n                    </div>\r\n                })}\r\n                <div className=\"form-group\">\r\n                    {this.props.config.buttons.map((i) => {\r\n                        return <input type={i.type} value={i.value} className={i.cssClass} />\r\n                    })}\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}