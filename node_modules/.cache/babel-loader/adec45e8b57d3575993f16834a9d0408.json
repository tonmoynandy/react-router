{"ast":null,"code":"var _jsxFileName = \"D:\\\\MY_WORK\\\\react-routing-test\\\\src\\\\components\\\\Dashboard.js\";\nimport React, { Component } from 'react';\nimport { DbHelper } from '../DbHelper';\nimport { connect } from 'react-redux';\nimport UserMenu from './UserMenu';\nimport Posts from './elements/Posts';\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.submitPost = () => {\n      const form = document.postform;\n      let postContent = form.postcontent.value;\n      postContent = postContent.trim();\n\n      if (postContent) {\n        DbHelper.insert('posts', {\n          user: this.state.user._id,\n          content: postContent,\n          postedAt: new Date().getTime()\n        });\n        this.setState({\n          'success': 'Your status is posted'\n        });\n        form.reset();\n        this.getUserPosts();\n        setTimeout(() => {\n          this.setState({\n            'success': null\n          });\n        }, 3000);\n      } else {\n        this.setState({\n          'errors': 'Please add any content as your status'\n        });\n        setTimeout(() => {\n          this.setState({\n            'errors': null\n          });\n        }, 3000);\n      }\n    };\n\n    this.state = {\n      errors: '',\n      success: '',\n      user: JSON.parse(sessionStorage.getItem(\"_u\")),\n      commentDisplay: []\n    };\n    this.getUserPosts();\n  }\n\n  getUserPosts() {\n    let userFriendList = DbHelper.filter('friend_requests', [['user_id', this.state.user._id], ['status', 'A']]);\n    let friendIds = userFriendList.map(i => i.friend_id);\n    friendIds.push(this.state.user._id);\n    let userPosts = DbHelper.all('posts');\n    userPosts = userPosts.filter(i => friendIds.indexOf(i.user) > -1);\n    userPosts = userPosts.sort(function (a, b) {\n      return b.postedAt - a.postedAt;\n    });\n\n    if (userPosts) {\n      this.props.dispatch({\n        type: 'USER_POST',\n        userPosts\n      }); // USER_POST\n    }\n  }\n\n  render() {\n    let userPostContent = [];\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Dashboard\")), React.createElement(\"div\", {\n      className: \"col-7 text-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(UserMenu, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.state.success && React.createElement(\"div\", {\n      class: \"alert alert-success text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, this.state.success), this.state.errors && React.createElement(\"div\", {\n      class: \"alert alert-danger text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.state.errors), React.createElement(\"div\", {\n      className: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      name: \"postform\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      placeholder: \"Your status...\",\n      name: \"postcontent\",\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"col text-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"button\",\n      onClick: this.submitPost,\n      value: \"Post\",\n      className: \"btn btn-primary btn-sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })))))), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.props.userPosts && React.createElement(Posts, {\n      posts: this.props.userPosts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    userPosts: state.userpostreducer\n  };\n};\n\nexport default connect(mapStateToProps)(Dashboard);","map":{"version":3,"sources":["D:/MY_WORK/react-routing-test/src/components/Dashboard.js"],"names":["React","Component","DbHelper","connect","UserMenu","Posts","Dashboard","constructor","props","submitPost","form","document","postform","postContent","postcontent","value","trim","insert","user","state","_id","content","postedAt","Date","getTime","setState","reset","getUserPosts","setTimeout","errors","success","JSON","parse","sessionStorage","getItem","commentDisplay","userFriendList","filter","friendIds","map","i","friend_id","push","userPosts","all","indexOf","sort","a","b","dispatch","type","render","userPostContent","mapStateToProps","userpostreducer"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {DbHelper} from '../DbHelper';\r\nimport {connect} from 'react-redux';\r\nimport UserMenu from './UserMenu';\r\nimport Posts from './elements/Posts';\r\nclass Dashboard extends  Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      errors:'',\r\n      success:'',\r\n      user:JSON.parse(sessionStorage.getItem(\"_u\")),\r\n      commentDisplay:[]\r\n    }\r\n    this.getUserPosts();\r\n  }\r\n  getUserPosts() {\r\n    let userFriendList = DbHelper.filter('friend_requests',[\r\n      ['user_id',this.state.user._id],\r\n      ['status','A']    \r\n    ]);\r\n    let friendIds = userFriendList.map((i)=> i.friend_id);\r\n    friendIds.push(this.state.user._id);\r\n        let userPosts = DbHelper.all('posts');\r\n        userPosts = userPosts.filter((i)=> friendIds.indexOf(i.user)>-1);\r\n    userPosts = userPosts.sort(function(a,b){ return b.postedAt - a.postedAt });\r\n    if (userPosts) {\r\n      this.props.dispatch({\r\n          type: 'USER_POST',\r\n          userPosts\r\n        })\r\n      // USER_POST\r\n    }\r\n  }\r\n  submitPost = ()=>{\r\n    const form = document.postform;\r\n    let postContent = form.postcontent.value;\r\n    postContent = postContent.trim();\r\n    if (postContent) {\r\n      DbHelper.insert('posts',{\r\n          user: this.state.user._id,\r\n          content:postContent,\r\n          postedAt: new Date().getTime()\r\n      });\r\n  \r\n      this.setState({'success':'Your status is posted'});\r\n      form.reset();\r\n      this.getUserPosts();\r\n      setTimeout(()=>{\r\n        this.setState({'success':null});\r\n      },3000)\r\n    } else {\r\n      this.setState({'errors':'Please add any content as your status'});\r\n      setTimeout(()=>{\r\n        this.setState({'errors':null});\r\n      },3000)\r\n    }\r\n   \r\n  }\r\n\r\n  render() {\r\n    let userPostContent = [];\r\n    \r\n    \r\n    return (\r\n      <React.Fragment>\r\n      <div className=\"row\">\r\n      <div className=\"col-5\">\r\n      <h4>Dashboard</h4>\r\n      </div>\r\n      <div className=\"col-7 text-right\">\r\n      <UserMenu/>\r\n      </div>\r\n      </div>\r\n      <div className=\"row\">\r\n      <div className=\"col-12\">\r\n          {this.state.success &&\r\n          <div class=\"alert alert-success text-center\">\r\n          {this.state.success}\r\n          </div>\r\n          }\r\n          {this.state.errors &&\r\n          <div class=\"alert alert-danger text-center\">\r\n          {this.state.errors}\r\n          </div>\r\n          }\r\n          <div className=\"card\"><div className=\"card-body\">\r\n          <form name=\"postform\">\r\n          <div className=\"form-group\">\r\n          <textarea placeholder=\"Your status...\" name=\"postcontent\" className=\"form-control\"></textarea></div>\r\n          </form>\r\n          <div className=\"col text-right\">\r\n          <input type=\"button\" onClick={this.submitPost} value=\"Post\" className=\"btn btn-primary btn-sm\"/>\r\n          </div>\r\n          </div></div>\r\n      </div>\r\n      </div>\r\n      <div className=\"row\">\r\n      {this.props.userPosts &&\r\n      <Posts posts={this.props.userPosts}/>\r\n      }\r\n      </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) =>{\r\n  return {\r\n    userPosts: state.userpostreducer\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Dashboard);"]},"metadata":{},"sourceType":"module"}