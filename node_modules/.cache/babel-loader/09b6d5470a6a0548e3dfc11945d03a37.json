{"ast":null,"code":"import _objectSpread from \"D:\\\\MY_WORK\\\\react-routing-test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"D:\\\\MY_WORK\\\\react-routing-test\\\\src\\\\components\\\\Register.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { DbHelper } from '../DbHelper';\nimport Form from './elements/Form';\n\nclass Register extends React.Component {\n  constructor() {\n    super();\n\n    this.submitHandeler = $event => {\n      $event.preventDefault();\n      console.log('sss'); // const formData = {};\n      //   const errorMessages = {};\n      //   var formValidStatus = true;\n      //   const formElement =  Array.from(document.registerform.elements).map(({name,value})=>{\n      //     formData[name] = value;\n      //     let validation = this.state.validation.rules[name];\n      //     if (validation) {\n      //       errorMessages[name] = {};\n      //       if (validation.indexOf('required') > -1) {\n      //         if (value == '') {\n      //          errorMessages[name]['required']='field is required';\n      //          formValidStatus = false;\n      //         }\n      //       }\n      //       if (value !== '' && validation.indexOf('email') > -1) {\n      //        if (!(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/).test(value)) {\n      //         errorMessages[name]['email']='Email is not valid';\n      //         formValidStatus = false;\n      //        }\n      //       }\n      //       if (value !== '' && validation.find((i)=> i.startsWith('min'))) {\n      //          let minValue = validation.find((i)=> i.startsWith('min')).split(':');\n      //          minValue = parseInt(minValue[1]);\n      //          if (value.length < minValue) {\n      //            errorMessages[name]['min']='minimum '+minValue+' character is required';\n      //            formValidStatus = false;\n      //          }\n      //       }\n      //       if (value !== '' && validation.find((i)=> i.startsWith('max'))) {\n      //          let maxValue = validation.find((i)=> i.startsWith('max')).split(':');\n      //          maxValue = parseInt(maxValue[1]);\n      //          if (value.length > maxValue) {\n      //            errorMessages[name]['max']='max '+maxValue+' character is required';\n      //            formValidStatus = false;\n      //          }\n      //       }\n      //     }\n      //     return {\n      //       name:name,\n      //       value:value\n      //     }\n      //   });\n      //   setTimeout(()=>{\n      //     this.setState(prevState=>({\n      //           ...prevState,\n      //           validation:{\n      //             ...prevState.validation,\n      //             messages:errorMessages,\n      //             valid:formValidStatus,\n      //           },\n      //           formValue:formData\n      //         }));\n      //   if ( this.state.validation.valid === true) {\n      //      DbHelper.insert('users',this.state.formValue);\n      //      document.registerform.reset();\n      //      this.setState({'successMessage':'Welcome '+ this.state.formValue.name})\n      //   } else {\n      //     // alert('error');\n      //   }\n      //   },50);\n    };\n\n    this.state = {\n      formConfig: {\n        name: 'regForm',\n        elements: {\n          'name': {\n            type: 'text',\n            value: '',\n            validation: ['required']\n          },\n          'email': {\n            type: 'email',\n            value: '',\n            validation: ['required', 'email']\n          },\n          'password': {\n            type: 'password',\n            value: '',\n            validation: ['required']\n          }\n        },\n        buttons: [{\n          type: 'submit',\n          value: 'Sign up',\n          cssClass: 'btn btn-success'\n        }],\n        submitHandeler: null\n      },\n      validation: {\n        rules: {\n          name: ['required'],\n          email: ['required', 'email'],\n          password: ['required']\n        },\n        messages: {},\n        valid: false\n      },\n      formValue: {},\n      successMessage: ''\n    };\n  }\n\n  componentDidMount() {\n    this.setState(prevState => _objectSpread({}, prevState, {\n      formConfig: _objectSpread({}, prevState.formConfig, {\n        submitHandeler: this.submitHandeler\n      })\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"col-8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Sign up\"), this.state.successMessage && React.createElement(\"div\", {\n      className: \"alert alert-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, this.state.successMessage), React.createElement(Form, {\n      config: this.state.formConfig,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      name: \"registerform\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      name: \"name\",\n      placeholder: \"Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), this.state.validation.messages.name && this.state.validation.messages.name.required && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, this.state.validation.messages.name.required)), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"email\",\n      className: \"form-control\",\n      name: \"email\",\n      placeholder: \"Email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), this.state.validation.messages.email && this.state.validation.messages.email.required && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, this.state.validation.messages.email.required), this.state.validation.messages.email && this.state.validation.messages.email.email && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, this.state.validation.messages.email.email)), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"password\",\n      className: \"form-control\",\n      name: \"password\",\n      placeholder: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), this.state.validation.messages.password && this.state.validation.messages.password.required && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, this.state.validation.messages.password.required))), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.submitHandeler,\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Submit\")), React.createElement(\"div\", {\n      className: \"col text-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: '/',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Existing User?\")))))), React.createElement(\"div\", {\n      className: \"col-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Register;","map":{"version":3,"sources":["D:/MY_WORK/react-routing-test/src/components/Register.js"],"names":["React","Link","DbHelper","Form","Register","Component","constructor","submitHandeler","$event","preventDefault","console","log","state","formConfig","name","elements","type","value","validation","buttons","cssClass","rules","email","password","messages","valid","formValue","successMessage","componentDidMount","setState","prevState","render","required"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {DbHelper} from '../DbHelper';\r\nimport Form from './elements/Form';\r\nclass Register extends React.Component {\r\n\r\nconstructor() {\r\n  super();\r\n  this.state = {\r\n      formConfig:{\r\n        name:'regForm',\r\n        elements:{\r\n          'name': {\r\n            type:'text',\r\n            value:'',\r\n            validation:['required']\r\n          },\r\n          'email': {\r\n            type:'email',\r\n            value:'',\r\n            validation:['required','email']\r\n          },\r\n          'password': {\r\n            type:'password',\r\n            value:'',\r\n            validation:['required']\r\n          }\r\n        },\r\n        buttons: [\r\n          {\r\n            type:'submit',\r\n            value:'Sign up',\r\n            cssClass:'btn btn-success'\r\n          }\r\n        ],\r\n        submitHandeler:null\r\n      },\r\n      validation: {\r\n        rules: {\r\n         name:['required'],\r\n         email:['required','email'],\r\n         password:['required']\r\n        },\r\n        messages:{},\r\n        valid:false,\r\n      },\r\n      formValue:{},\r\n      successMessage:''\r\n    }\r\n}\r\ncomponentDidMount() {\r\n  this.setState((prevState)=>({\r\n    ...prevState,\r\n    formConfig: {\r\n      ...prevState.formConfig,\r\n      submitHandeler: this.submitHandeler\r\n    }\r\n  }))\r\n}\r\n\r\nsubmitHandeler = ($event)=>{\r\n  $event.preventDefault();\r\n\r\n  console.log('sss');\r\n  // const formData = {};\r\n  //   const errorMessages = {};\r\n  //   var formValidStatus = true;\r\n  //   const formElement =  Array.from(document.registerform.elements).map(({name,value})=>{\r\n  //     formData[name] = value;\r\n  //     let validation = this.state.validation.rules[name];\r\n  //     if (validation) {\r\n  //       errorMessages[name] = {};\r\n  //       if (validation.indexOf('required') > -1) {\r\n  //         if (value == '') {\r\n  //          errorMessages[name]['required']='field is required';\r\n  //          formValidStatus = false;\r\n  //         }\r\n  //       }\r\n  //       if (value !== '' && validation.indexOf('email') > -1) {\r\n  //        if (!(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/).test(value)) {\r\n  //         errorMessages[name]['email']='Email is not valid';\r\n  //         formValidStatus = false;\r\n  //        }\r\n  //       }\r\n  //       if (value !== '' && validation.find((i)=> i.startsWith('min'))) {\r\n  //          let minValue = validation.find((i)=> i.startsWith('min')).split(':');\r\n  //          minValue = parseInt(minValue[1]);\r\n  //          if (value.length < minValue) {\r\n  //            errorMessages[name]['min']='minimum '+minValue+' character is required';\r\n  //            formValidStatus = false;\r\n  //          }\r\n  //       }\r\n  //       if (value !== '' && validation.find((i)=> i.startsWith('max'))) {\r\n  //          let maxValue = validation.find((i)=> i.startsWith('max')).split(':');\r\n  //          maxValue = parseInt(maxValue[1]);\r\n  //          if (value.length > maxValue) {\r\n  //            errorMessages[name]['max']='max '+maxValue+' character is required';\r\n  //            formValidStatus = false;\r\n  //          }\r\n  //       }\r\n  //     }\r\n      \r\n  //     return {\r\n  //       name:name,\r\n  //       value:value\r\n  //     }\r\n  //   });\r\n  //   setTimeout(()=>{\r\n  //     this.setState(prevState=>({\r\n  //           ...prevState,\r\n  //           validation:{\r\n  //             ...prevState.validation,\r\n  //             messages:errorMessages,\r\n  //             valid:formValidStatus,\r\n  //           },\r\n  //           formValue:formData\r\n  //         }));\r\n  //   if ( this.state.validation.valid === true) {\r\n  //      DbHelper.insert('users',this.state.formValue);\r\n  //      document.registerform.reset();\r\n  //      this.setState({'successMessage':'Welcome '+ this.state.formValue.name})\r\n  //   } else {\r\n  //     // alert('error');\r\n  //   }\r\n  //   },50);\r\n\r\n}\r\n\r\nrender() {\r\n  return (\r\n    <div className=\"row\">\r\n    <div className=\"col-2\"></div>\r\n    <div className=\"col-8\">\r\n    <div className=\"card\">\r\n    <div className=\"card-body\">\r\n          <h5 className=\"text-center\">Sign up</h5>\r\n          {this.state.successMessage &&\r\n          <div className=\"alert alert-success\" >\r\n          {this.state.successMessage}\r\n          </div>\r\n          }\r\n          <Form config={this.state.formConfig} />\r\n          <form name=\"registerform\">\r\n          <div className=\"form-group\">\r\n          <input type=\"text\" className=\"form-control\" name=\"name\" placeholder=\"Name\" />\r\n          {(this.state.validation.messages.name && this.state.validation.messages.name.required) &&  \r\n<p>\r\n{this.state.validation.messages.name.required}\r\n</p>}\r\n          </div>\r\n          <div className=\"form-group\">\r\n          <input type=\"email\" className=\"form-control\" name=\"email\" placeholder=\"Email\" />\r\n          {(this.state.validation.messages.email && this.state.validation.messages.email.required) &&  \r\n<p>\r\n{this.state.validation.messages.email.required}\r\n</p>}\r\n{(this.state.validation.messages.email && this.state.validation.messages.email.email) &&  \r\n<p>\r\n{this.state.validation.messages.email.email}\r\n</p>\r\n}\r\n          </div>\r\n          <div className=\"form-group\">\r\n          <input type=\"password\" className=\"form-control\" name=\"password\" placeholder=\"Password\" />\r\n          {(this.state.validation.messages.password && this.state.validation.messages.password.required) &&  \r\n<p>\r\n{this.state.validation.messages.password.required}\r\n</p>}\r\n          </div>\r\n          \r\n          </form>\r\n          <div className=\"row\">\r\n          <div className=\"col\">\r\n          <button  onClick={this.submitHandeler} className=\"btn btn-primary\" >Submit</button>\r\n          </div>\r\n          <div className=\"col text-right\">\r\n          <Link to={'/'} >Existing User?</Link>\r\n          </div>\r\n          </div>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    <div className=\"col-2\"></div>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default Register;"]},"metadata":{},"sourceType":"module"}